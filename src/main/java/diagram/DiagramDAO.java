/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package diagram;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-19")
public class DiagramDAO implements org.apache.thrift.TBase<DiagramDAO, DiagramDAO._Fields>, java.io.Serializable, Cloneable, Comparable<DiagramDAO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiagramDAO");

  private static final org.apache.thrift.protocol.TField DIAGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("diagramId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DiagramDAOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DiagramDAOTupleSchemeFactory());
  }

  public long diagramId; // required
  public String name; // required
  public echo.User creator; // required
  public Set<DefaultDiagramNodeDAO> nodes; // required
  public Set<LinkDAO> links; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIAGRAM_ID((short)1, "diagramId"),
    NAME((short)2, "name"),
    CREATOR((short)3, "creator"),
    NODES((short)4, "nodes"),
    LINKS((short)5, "links");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIAGRAM_ID
          return DIAGRAM_ID;
        case 2: // NAME
          return NAME;
        case 3: // CREATOR
          return CREATOR;
        case 4: // NODES
          return NODES;
        case 5: // LINKS
          return LINKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DIAGRAMID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIAGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("diagramId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, echo.User.class)));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DefaultDiagramNodeDAO.class))));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinkDAO.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiagramDAO.class, metaDataMap);
  }

  public DiagramDAO() {
  }

  public DiagramDAO(
    long diagramId,
    String name,
    echo.User creator,
    Set<DefaultDiagramNodeDAO> nodes,
    Set<LinkDAO> links)
  {
    this();
    this.diagramId = diagramId;
    setDiagramIdIsSet(true);
    this.name = name;
    this.creator = creator;
    this.nodes = nodes;
    this.links = links;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiagramDAO(DiagramDAO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.diagramId = other.diagramId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCreator()) {
      this.creator = new echo.User(other.creator);
    }
    if (other.isSetNodes()) {
      Set<DefaultDiagramNodeDAO> __this__nodes = new HashSet<DefaultDiagramNodeDAO>(other.nodes.size());
      for (DefaultDiagramNodeDAO other_element : other.nodes) {
        __this__nodes.add(new DefaultDiagramNodeDAO(other_element));
      }
      this.nodes = __this__nodes;
    }
    if (other.isSetLinks()) {
      Set<LinkDAO> __this__links = new HashSet<LinkDAO>(other.links.size());
      for (LinkDAO other_element : other.links) {
        __this__links.add(new LinkDAO(other_element));
      }
      this.links = __this__links;
    }
  }

  public DiagramDAO deepCopy() {
    return new DiagramDAO(this);
  }

  @Override
  public void clear() {
    setDiagramIdIsSet(false);
    this.diagramId = 0;
    this.name = null;
    this.creator = null;
    this.nodes = null;
    this.links = null;
  }

  public long getDiagramId() {
    return this.diagramId;
  }

  public DiagramDAO setDiagramId(long diagramId) {
    this.diagramId = diagramId;
    setDiagramIdIsSet(true);
    return this;
  }

  public void unsetDiagramId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIAGRAMID_ISSET_ID);
  }

  /** Returns true if field diagramId is set (has been assigned a value) and false otherwise */
  public boolean isSetDiagramId() {
    return EncodingUtils.testBit(__isset_bitfield, __DIAGRAMID_ISSET_ID);
  }

  public void setDiagramIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIAGRAMID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DiagramDAO setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public echo.User getCreator() {
    return this.creator;
  }

  public DiagramDAO setCreator(echo.User creator) {
    this.creator = creator;
    return this;
  }

  public void unsetCreator() {
    this.creator = null;
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return this.creator != null;
  }

  public void setCreatorIsSet(boolean value) {
    if (!value) {
      this.creator = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<DefaultDiagramNodeDAO> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(DefaultDiagramNodeDAO elem) {
    if (this.nodes == null) {
      this.nodes = new HashSet<DefaultDiagramNodeDAO>();
    }
    this.nodes.add(elem);
  }

  public Set<DefaultDiagramNodeDAO> getNodes() {
    return this.nodes;
  }

  public DiagramDAO setNodes(Set<DefaultDiagramNodeDAO> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<LinkDAO> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(LinkDAO elem) {
    if (this.links == null) {
      this.links = new HashSet<LinkDAO>();
    }
    this.links.add(elem);
  }

  public Set<LinkDAO> getLinks() {
    return this.links;
  }

  public DiagramDAO setLinks(Set<LinkDAO> links) {
    this.links = links;
    return this;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIAGRAM_ID:
      if (value == null) {
        unsetDiagramId();
      } else {
        setDiagramId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((echo.User)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((Set<DefaultDiagramNodeDAO>)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((Set<LinkDAO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIAGRAM_ID:
      return Long.valueOf(getDiagramId());

    case NAME:
      return getName();

    case CREATOR:
      return getCreator();

    case NODES:
      return getNodes();

    case LINKS:
      return getLinks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIAGRAM_ID:
      return isSetDiagramId();
    case NAME:
      return isSetName();
    case CREATOR:
      return isSetCreator();
    case NODES:
      return isSetNodes();
    case LINKS:
      return isSetLinks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DiagramDAO)
      return this.equals((DiagramDAO)that);
    return false;
  }

  public boolean equals(DiagramDAO that) {
    if (that == null)
      return false;

    boolean this_present_diagramId = true;
    boolean that_present_diagramId = true;
    if (this_present_diagramId || that_present_diagramId) {
      if (!(this_present_diagramId && that_present_diagramId))
        return false;
      if (this.diagramId != that.diagramId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_creator = true && this.isSetCreator();
    boolean that_present_creator = true && that.isSetCreator();
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (!this.creator.equals(that.creator))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_diagramId = true;
    list.add(present_diagramId);
    if (present_diagramId)
      list.add(diagramId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_creator = true && (isSetCreator());
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_nodes = true && (isSetNodes());
    list.add(present_nodes);
    if (present_nodes)
      list.add(nodes);

    boolean present_links = true && (isSetLinks());
    list.add(present_links);
    if (present_links)
      list.add(links);

    return list.hashCode();
  }

  @Override
  public int compareTo(DiagramDAO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDiagramId()).compareTo(other.isSetDiagramId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiagramId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diagramId, other.diagramId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DiagramDAO(");
    boolean first = true;

    sb.append("diagramId:");
    sb.append(this.diagramId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    if (this.creator == null) {
      sb.append("null");
    } else {
      sb.append(this.creator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodes:");
    if (this.nodes == null) {
      sb.append("null");
    } else {
      sb.append(this.nodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("links:");
    if (this.links == null) {
      sb.append("null");
    } else {
      sb.append(this.links);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (creator != null) {
      creator.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiagramDAOStandardSchemeFactory implements SchemeFactory {
    public DiagramDAOStandardScheme getScheme() {
      return new DiagramDAOStandardScheme();
    }
  }

  private static class DiagramDAOStandardScheme extends StandardScheme<DiagramDAO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiagramDAO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIAGRAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.diagramId = iprot.readI64();
              struct.setDiagramIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.creator = new echo.User();
              struct.creator.read(iprot);
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.nodes = new HashSet<DefaultDiagramNodeDAO>(2*_set24.size);
                DefaultDiagramNodeDAO _elem25;
                for (int _i26 = 0; _i26 < _set24.size; ++_i26)
                {
                  _elem25 = new DefaultDiagramNodeDAO();
                  _elem25.read(iprot);
                  struct.nodes.add(_elem25);
                }
                iprot.readSetEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.links = new HashSet<LinkDAO>(2*_set27.size);
                LinkDAO _elem28;
                for (int _i29 = 0; _i29 < _set27.size; ++_i29)
                {
                  _elem28 = new LinkDAO();
                  _elem28.read(iprot);
                  struct.links.add(_elem28);
                }
                iprot.readSetEnd();
              }
              struct.setLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiagramDAO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DIAGRAM_ID_FIELD_DESC);
      oprot.writeI64(struct.diagramId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.creator != null) {
        oprot.writeFieldBegin(CREATOR_FIELD_DESC);
        struct.creator.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.nodes != null) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
          for (DefaultDiagramNodeDAO _iter30 : struct.nodes)
          {
            _iter30.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.links != null) {
        oprot.writeFieldBegin(LINKS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.links.size()));
          for (LinkDAO _iter31 : struct.links)
          {
            _iter31.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiagramDAOTupleSchemeFactory implements SchemeFactory {
    public DiagramDAOTupleScheme getScheme() {
      return new DiagramDAOTupleScheme();
    }
  }

  private static class DiagramDAOTupleScheme extends TupleScheme<DiagramDAO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiagramDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDiagramId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCreator()) {
        optionals.set(2);
      }
      if (struct.isSetNodes()) {
        optionals.set(3);
      }
      if (struct.isSetLinks()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDiagramId()) {
        oprot.writeI64(struct.diagramId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCreator()) {
        struct.creator.write(oprot);
      }
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (DefaultDiagramNodeDAO _iter32 : struct.nodes)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetLinks()) {
        {
          oprot.writeI32(struct.links.size());
          for (LinkDAO _iter33 : struct.links)
          {
            _iter33.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiagramDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.diagramId = iprot.readI64();
        struct.setDiagramIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creator = new echo.User();
        struct.creator.read(iprot);
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set34 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodes = new HashSet<DefaultDiagramNodeDAO>(2*_set34.size);
          DefaultDiagramNodeDAO _elem35;
          for (int _i36 = 0; _i36 < _set34.size; ++_i36)
          {
            _elem35 = new DefaultDiagramNodeDAO();
            _elem35.read(iprot);
            struct.nodes.add(_elem35);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set37 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.links = new HashSet<LinkDAO>(2*_set37.size);
          LinkDAO _elem38;
          for (int _i39 = 0; _i39 < _set37.size; ++_i39)
          {
            _elem38 = new LinkDAO();
            _elem38.read(iprot);
            struct.links.add(_elem38);
          }
        }
        struct.setLinksIsSet(true);
      }
    }
  }

}

