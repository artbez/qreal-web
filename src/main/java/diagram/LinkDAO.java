/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package diagram;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-25")
public class LinkDAO implements org.apache.thrift.TBase<LinkDAO, LinkDAO._Fields>, java.io.Serializable, Cloneable, Comparable<LinkDAO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LinkDAO");

  private static final org.apache.thrift.protocol.TField LINK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("linkId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField JOINT_OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jointObjectId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VERICES_FIELD_DESC = new org.apache.thrift.protocol.TField("verices", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.SET, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LinkDAOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LinkDAOTupleSchemeFactory());
  }

  public long linkId; // required
  public String jointObjectId; // required
  public String source; // required
  public String target; // required
  public Set<LinkVertexDAO> verices; // required
  public Set<PropertyDAO> properties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINK_ID((short)1, "linkId"),
    JOINT_OBJECT_ID((short)2, "jointObjectId"),
    SOURCE((short)3, "source"),
    TARGET((short)4, "target"),
    VERICES((short)5, "verices"),
    PROPERTIES((short)6, "properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINK_ID
          return LINK_ID;
        case 2: // JOINT_OBJECT_ID
          return JOINT_OBJECT_ID;
        case 3: // SOURCE
          return SOURCE;
        case 4: // TARGET
          return TARGET;
        case 5: // VERICES
          return VERICES;
        case 6: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LINKID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINK_ID, new org.apache.thrift.meta_data.FieldMetaData("linkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOINT_OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("jointObjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERICES, new org.apache.thrift.meta_data.FieldMetaData("verices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinkVertexDAO.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PropertyDAO.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LinkDAO.class, metaDataMap);
  }

  public LinkDAO() {
  }

  public LinkDAO(
    long linkId,
    String jointObjectId,
    String source,
    String target,
    Set<LinkVertexDAO> verices,
    Set<PropertyDAO> properties)
  {
    this();
    this.linkId = linkId;
    setLinkIdIsSet(true);
    this.jointObjectId = jointObjectId;
    this.source = source;
    this.target = target;
    this.verices = verices;
    this.properties = properties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LinkDAO(LinkDAO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.linkId = other.linkId;
    if (other.isSetJointObjectId()) {
      this.jointObjectId = other.jointObjectId;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetTarget()) {
      this.target = other.target;
    }
    if (other.isSetVerices()) {
      Set<LinkVertexDAO> __this__verices = new HashSet<LinkVertexDAO>(other.verices.size());
      for (LinkVertexDAO other_element : other.verices) {
        __this__verices.add(new LinkVertexDAO(other_element));
      }
      this.verices = __this__verices;
    }
    if (other.isSetProperties()) {
      Set<PropertyDAO> __this__properties = new HashSet<PropertyDAO>(other.properties.size());
      for (PropertyDAO other_element : other.properties) {
        __this__properties.add(new PropertyDAO(other_element));
      }
      this.properties = __this__properties;
    }
  }

  public LinkDAO deepCopy() {
    return new LinkDAO(this);
  }

  @Override
  public void clear() {
    setLinkIdIsSet(false);
    this.linkId = 0;
    this.jointObjectId = null;
    this.source = null;
    this.target = null;
    this.verices = null;
    this.properties = null;
  }

  public long getLinkId() {
    return this.linkId;
  }

  public LinkDAO setLinkId(long linkId) {
    this.linkId = linkId;
    setLinkIdIsSet(true);
    return this;
  }

  public void unsetLinkId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  /** Returns true if field linkId is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkId() {
    return EncodingUtils.testBit(__isset_bitfield, __LINKID_ISSET_ID);
  }

  public void setLinkIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINKID_ISSET_ID, value);
  }

  public String getJointObjectId() {
    return this.jointObjectId;
  }

  public LinkDAO setJointObjectId(String jointObjectId) {
    this.jointObjectId = jointObjectId;
    return this;
  }

  public void unsetJointObjectId() {
    this.jointObjectId = null;
  }

  /** Returns true if field jointObjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetJointObjectId() {
    return this.jointObjectId != null;
  }

  public void setJointObjectIdIsSet(boolean value) {
    if (!value) {
      this.jointObjectId = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public LinkDAO setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getTarget() {
    return this.target;
  }

  public LinkDAO setTarget(String target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public int getVericesSize() {
    return (this.verices == null) ? 0 : this.verices.size();
  }

  public java.util.Iterator<LinkVertexDAO> getVericesIterator() {
    return (this.verices == null) ? null : this.verices.iterator();
  }

  public void addToVerices(LinkVertexDAO elem) {
    if (this.verices == null) {
      this.verices = new HashSet<LinkVertexDAO>();
    }
    this.verices.add(elem);
  }

  public Set<LinkVertexDAO> getVerices() {
    return this.verices;
  }

  public LinkDAO setVerices(Set<LinkVertexDAO> verices) {
    this.verices = verices;
    return this;
  }

  public void unsetVerices() {
    this.verices = null;
  }

  /** Returns true if field verices is set (has been assigned a value) and false otherwise */
  public boolean isSetVerices() {
    return this.verices != null;
  }

  public void setVericesIsSet(boolean value) {
    if (!value) {
      this.verices = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public java.util.Iterator<PropertyDAO> getPropertiesIterator() {
    return (this.properties == null) ? null : this.properties.iterator();
  }

  public void addToProperties(PropertyDAO elem) {
    if (this.properties == null) {
      this.properties = new HashSet<PropertyDAO>();
    }
    this.properties.add(elem);
  }

  public Set<PropertyDAO> getProperties() {
    return this.properties;
  }

  public LinkDAO setProperties(Set<PropertyDAO> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINK_ID:
      if (value == null) {
        unsetLinkId();
      } else {
        setLinkId((Long)value);
      }
      break;

    case JOINT_OBJECT_ID:
      if (value == null) {
        unsetJointObjectId();
      } else {
        setJointObjectId((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((String)value);
      }
      break;

    case VERICES:
      if (value == null) {
        unsetVerices();
      } else {
        setVerices((Set<LinkVertexDAO>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Set<PropertyDAO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINK_ID:
      return Long.valueOf(getLinkId());

    case JOINT_OBJECT_ID:
      return getJointObjectId();

    case SOURCE:
      return getSource();

    case TARGET:
      return getTarget();

    case VERICES:
      return getVerices();

    case PROPERTIES:
      return getProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINK_ID:
      return isSetLinkId();
    case JOINT_OBJECT_ID:
      return isSetJointObjectId();
    case SOURCE:
      return isSetSource();
    case TARGET:
      return isSetTarget();
    case VERICES:
      return isSetVerices();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LinkDAO)
      return this.equals((LinkDAO)that);
    return false;
  }

  public boolean equals(LinkDAO that) {
    if (that == null)
      return false;

    boolean this_present_linkId = true;
    boolean that_present_linkId = true;
    if (this_present_linkId || that_present_linkId) {
      if (!(this_present_linkId && that_present_linkId))
        return false;
      if (this.linkId != that.linkId)
        return false;
    }

    boolean this_present_jointObjectId = true && this.isSetJointObjectId();
    boolean that_present_jointObjectId = true && that.isSetJointObjectId();
    if (this_present_jointObjectId || that_present_jointObjectId) {
      if (!(this_present_jointObjectId && that_present_jointObjectId))
        return false;
      if (!this.jointObjectId.equals(that.jointObjectId))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_verices = true && this.isSetVerices();
    boolean that_present_verices = true && that.isSetVerices();
    if (this_present_verices || that_present_verices) {
      if (!(this_present_verices && that_present_verices))
        return false;
      if (!this.verices.equals(that.verices))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_linkId = true;
    list.add(present_linkId);
    if (present_linkId)
      list.add(linkId);

    boolean present_jointObjectId = true && (isSetJointObjectId());
    list.add(present_jointObjectId);
    if (present_jointObjectId)
      list.add(jointObjectId);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_target = true && (isSetTarget());
    list.add(present_target);
    if (present_target)
      list.add(target);

    boolean present_verices = true && (isSetVerices());
    list.add(present_verices);
    if (present_verices)
      list.add(verices);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    return list.hashCode();
  }

  @Override
  public int compareTo(LinkDAO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLinkId()).compareTo(other.isSetLinkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkId, other.linkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJointObjectId()).compareTo(other.isSetJointObjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJointObjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jointObjectId, other.jointObjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerices()).compareTo(other.isSetVerices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verices, other.verices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LinkDAO(");
    boolean first = true;

    sb.append("linkId:");
    sb.append(this.linkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jointObjectId:");
    if (this.jointObjectId == null) {
      sb.append("null");
    } else {
      sb.append(this.jointObjectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verices:");
    if (this.verices == null) {
      sb.append("null");
    } else {
      sb.append(this.verices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("properties:");
    if (this.properties == null) {
      sb.append("null");
    } else {
      sb.append(this.properties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinkDAOStandardSchemeFactory implements SchemeFactory {
    public LinkDAOStandardScheme getScheme() {
      return new LinkDAOStandardScheme();
    }
  }

  private static class LinkDAOStandardScheme extends StandardScheme<LinkDAO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LinkDAO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.linkId = iprot.readI64();
              struct.setLinkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOINT_OBJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jointObjectId = iprot.readString();
              struct.setJointObjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.target = iprot.readString();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERICES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.verices = new HashSet<LinkVertexDAO>(2*_set8.size);
                LinkVertexDAO _elem9;
                for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                {
                  _elem9 = new LinkVertexDAO();
                  _elem9.read(iprot);
                  struct.verices.add(_elem9);
                }
                iprot.readSetEnd();
              }
              struct.setVericesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set11 = iprot.readSetBegin();
                struct.properties = new HashSet<PropertyDAO>(2*_set11.size);
                PropertyDAO _elem12;
                for (int _i13 = 0; _i13 < _set11.size; ++_i13)
                {
                  _elem12 = new PropertyDAO();
                  _elem12.read(iprot);
                  struct.properties.add(_elem12);
                }
                iprot.readSetEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LinkDAO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LINK_ID_FIELD_DESC);
      oprot.writeI64(struct.linkId);
      oprot.writeFieldEnd();
      if (struct.jointObjectId != null) {
        oprot.writeFieldBegin(JOINT_OBJECT_ID_FIELD_DESC);
        oprot.writeString(struct.jointObjectId);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeString(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.verices != null) {
        oprot.writeFieldBegin(VERICES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.verices.size()));
          for (LinkVertexDAO _iter14 : struct.verices)
          {
            _iter14.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
          for (PropertyDAO _iter15 : struct.properties)
          {
            _iter15.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinkDAOTupleSchemeFactory implements SchemeFactory {
    public LinkDAOTupleScheme getScheme() {
      return new LinkDAOTupleScheme();
    }
  }

  private static class LinkDAOTupleScheme extends TupleScheme<LinkDAO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LinkDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLinkId()) {
        optionals.set(0);
      }
      if (struct.isSetJointObjectId()) {
        optionals.set(1);
      }
      if (struct.isSetSource()) {
        optionals.set(2);
      }
      if (struct.isSetTarget()) {
        optionals.set(3);
      }
      if (struct.isSetVerices()) {
        optionals.set(4);
      }
      if (struct.isSetProperties()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLinkId()) {
        oprot.writeI64(struct.linkId);
      }
      if (struct.isSetJointObjectId()) {
        oprot.writeString(struct.jointObjectId);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetTarget()) {
        oprot.writeString(struct.target);
      }
      if (struct.isSetVerices()) {
        {
          oprot.writeI32(struct.verices.size());
          for (LinkVertexDAO _iter16 : struct.verices)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (PropertyDAO _iter17 : struct.properties)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LinkDAO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.linkId = iprot.readI64();
        struct.setLinkIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jointObjectId = iprot.readString();
        struct.setJointObjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.target = iprot.readString();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set18 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.verices = new HashSet<LinkVertexDAO>(2*_set18.size);
          LinkVertexDAO _elem19;
          for (int _i20 = 0; _i20 < _set18.size; ++_i20)
          {
            _elem19 = new LinkVertexDAO();
            _elem19.read(iprot);
            struct.verices.add(_elem19);
          }
        }
        struct.setVericesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.properties = new HashSet<PropertyDAO>(2*_set21.size);
          PropertyDAO _elem22;
          for (int _i23 = 0; _i23 < _set21.size; ++_i23)
          {
            _elem22 = new PropertyDAO();
            _elem22.read(iprot);
            struct.properties.add(_elem22);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

}

