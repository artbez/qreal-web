/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package robot;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-6")
public class RobotInfo implements org.apache.thrift.TBase<RobotInfo, RobotInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RobotInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotInfo");

  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SSID_FIELD_DESC = new org.apache.thrift.protocol.TField("ssid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODEL_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("modelConfig", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SYSTEM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("systemConfig", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("program", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RobotInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RobotInfoTupleSchemeFactory());
  }

  public String owner; // required
  public String name; // required
  public String ssid; // required
  public String modelConfig; // required
  public String systemConfig; // required
  public String program; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OWNER((short)1, "owner"),
    NAME((short)2, "name"),
    SSID((short)3, "ssid"),
    MODEL_CONFIG((short)4, "modelConfig"),
    SYSTEM_CONFIG((short)5, "systemConfig"),
    PROGRAM((short)6, "program");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OWNER
          return OWNER;
        case 2: // NAME
          return NAME;
        case 3: // SSID
          return SSID;
        case 4: // MODEL_CONFIG
          return MODEL_CONFIG;
        case 5: // SYSTEM_CONFIG
          return SYSTEM_CONFIG;
        case 6: // PROGRAM
          return PROGRAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SSID, new org.apache.thrift.meta_data.FieldMetaData("ssid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("modelConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYSTEM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("systemConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("program", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotInfo.class, metaDataMap);
  }

  public RobotInfo() {
  }

  public RobotInfo(
    String owner,
    String name,
    String ssid,
    String modelConfig,
    String systemConfig,
    String program)
  {
    this();
    this.owner = owner;
    this.name = name;
    this.ssid = ssid;
    this.modelConfig = modelConfig;
    this.systemConfig = systemConfig;
    this.program = program;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotInfo(RobotInfo other) {
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSsid()) {
      this.ssid = other.ssid;
    }
    if (other.isSetModelConfig()) {
      this.modelConfig = other.modelConfig;
    }
    if (other.isSetSystemConfig()) {
      this.systemConfig = other.systemConfig;
    }
    if (other.isSetProgram()) {
      this.program = other.program;
    }
  }

  public RobotInfo deepCopy() {
    return new RobotInfo(this);
  }

  @Override
  public void clear() {
    this.owner = null;
    this.name = null;
    this.ssid = null;
    this.modelConfig = null;
    this.systemConfig = null;
    this.program = null;
  }

  public String getOwner() {
    return this.owner;
  }

  public RobotInfo setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public RobotInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSsid() {
    return this.ssid;
  }

  public RobotInfo setSsid(String ssid) {
    this.ssid = ssid;
    return this;
  }

  public void unsetSsid() {
    this.ssid = null;
  }

  /** Returns true if field ssid is set (has been assigned a value) and false otherwise */
  public boolean isSetSsid() {
    return this.ssid != null;
  }

  public void setSsidIsSet(boolean value) {
    if (!value) {
      this.ssid = null;
    }
  }

  public String getModelConfig() {
    return this.modelConfig;
  }

  public RobotInfo setModelConfig(String modelConfig) {
    this.modelConfig = modelConfig;
    return this;
  }

  public void unsetModelConfig() {
    this.modelConfig = null;
  }

  /** Returns true if field modelConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetModelConfig() {
    return this.modelConfig != null;
  }

  public void setModelConfigIsSet(boolean value) {
    if (!value) {
      this.modelConfig = null;
    }
  }

  public String getSystemConfig() {
    return this.systemConfig;
  }

  public RobotInfo setSystemConfig(String systemConfig) {
    this.systemConfig = systemConfig;
    return this;
  }

  public void unsetSystemConfig() {
    this.systemConfig = null;
  }

  /** Returns true if field systemConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemConfig() {
    return this.systemConfig != null;
  }

  public void setSystemConfigIsSet(boolean value) {
    if (!value) {
      this.systemConfig = null;
    }
  }

  public String getProgram() {
    return this.program;
  }

  public RobotInfo setProgram(String program) {
    this.program = program;
    return this;
  }

  public void unsetProgram() {
    this.program = null;
  }

  /** Returns true if field program is set (has been assigned a value) and false otherwise */
  public boolean isSetProgram() {
    return this.program != null;
  }

  public void setProgramIsSet(boolean value) {
    if (!value) {
      this.program = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SSID:
      if (value == null) {
        unsetSsid();
      } else {
        setSsid((String)value);
      }
      break;

    case MODEL_CONFIG:
      if (value == null) {
        unsetModelConfig();
      } else {
        setModelConfig((String)value);
      }
      break;

    case SYSTEM_CONFIG:
      if (value == null) {
        unsetSystemConfig();
      } else {
        setSystemConfig((String)value);
      }
      break;

    case PROGRAM:
      if (value == null) {
        unsetProgram();
      } else {
        setProgram((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER:
      return getOwner();

    case NAME:
      return getName();

    case SSID:
      return getSsid();

    case MODEL_CONFIG:
      return getModelConfig();

    case SYSTEM_CONFIG:
      return getSystemConfig();

    case PROGRAM:
      return getProgram();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OWNER:
      return isSetOwner();
    case NAME:
      return isSetName();
    case SSID:
      return isSetSsid();
    case MODEL_CONFIG:
      return isSetModelConfig();
    case SYSTEM_CONFIG:
      return isSetSystemConfig();
    case PROGRAM:
      return isSetProgram();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotInfo)
      return this.equals((RobotInfo)that);
    return false;
  }

  public boolean equals(RobotInfo that) {
    if (that == null)
      return false;

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_ssid = true && this.isSetSsid();
    boolean that_present_ssid = true && that.isSetSsid();
    if (this_present_ssid || that_present_ssid) {
      if (!(this_present_ssid && that_present_ssid))
        return false;
      if (!this.ssid.equals(that.ssid))
        return false;
    }

    boolean this_present_modelConfig = true && this.isSetModelConfig();
    boolean that_present_modelConfig = true && that.isSetModelConfig();
    if (this_present_modelConfig || that_present_modelConfig) {
      if (!(this_present_modelConfig && that_present_modelConfig))
        return false;
      if (!this.modelConfig.equals(that.modelConfig))
        return false;
    }

    boolean this_present_systemConfig = true && this.isSetSystemConfig();
    boolean that_present_systemConfig = true && that.isSetSystemConfig();
    if (this_present_systemConfig || that_present_systemConfig) {
      if (!(this_present_systemConfig && that_present_systemConfig))
        return false;
      if (!this.systemConfig.equals(that.systemConfig))
        return false;
    }

    boolean this_present_program = true && this.isSetProgram();
    boolean that_present_program = true && that.isSetProgram();
    if (this_present_program || that_present_program) {
      if (!(this_present_program && that_present_program))
        return false;
      if (!this.program.equals(that.program))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_ssid = true && (isSetSsid());
    list.add(present_ssid);
    if (present_ssid)
      list.add(ssid);

    boolean present_modelConfig = true && (isSetModelConfig());
    list.add(present_modelConfig);
    if (present_modelConfig)
      list.add(modelConfig);

    boolean present_systemConfig = true && (isSetSystemConfig());
    list.add(present_systemConfig);
    if (present_systemConfig)
      list.add(systemConfig);

    boolean present_program = true && (isSetProgram());
    list.add(present_program);
    if (present_program)
      list.add(program);

    return list.hashCode();
  }

  @Override
  public int compareTo(RobotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSsid()).compareTo(other.isSetSsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ssid, other.ssid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelConfig()).compareTo(other.isSetModelConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelConfig, other.modelConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystemConfig()).compareTo(other.isSetSystemConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemConfig, other.systemConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgram()).compareTo(other.isSetProgram());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgram()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.program, other.program);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RobotInfo(");
    boolean first = true;

    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ssid:");
    if (this.ssid == null) {
      sb.append("null");
    } else {
      sb.append(this.ssid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelConfig:");
    if (this.modelConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.modelConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemConfig:");
    if (this.systemConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.systemConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("program:");
    if (this.program == null) {
      sb.append("null");
    } else {
      sb.append(this.program);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotInfoStandardSchemeFactory implements SchemeFactory {
    public RobotInfoStandardScheme getScheme() {
      return new RobotInfoStandardScheme();
    }
  }

  private static class RobotInfoStandardScheme extends StandardScheme<RobotInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SSID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ssid = iprot.readString();
              struct.setSsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODEL_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelConfig = iprot.readString();
              struct.setModelConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SYSTEM_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.systemConfig = iprot.readString();
              struct.setSystemConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.program = iprot.readString();
              struct.setProgramIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.ssid != null) {
        oprot.writeFieldBegin(SSID_FIELD_DESC);
        oprot.writeString(struct.ssid);
        oprot.writeFieldEnd();
      }
      if (struct.modelConfig != null) {
        oprot.writeFieldBegin(MODEL_CONFIG_FIELD_DESC);
        oprot.writeString(struct.modelConfig);
        oprot.writeFieldEnd();
      }
      if (struct.systemConfig != null) {
        oprot.writeFieldBegin(SYSTEM_CONFIG_FIELD_DESC);
        oprot.writeString(struct.systemConfig);
        oprot.writeFieldEnd();
      }
      if (struct.program != null) {
        oprot.writeFieldBegin(PROGRAM_FIELD_DESC);
        oprot.writeString(struct.program);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotInfoTupleSchemeFactory implements SchemeFactory {
    public RobotInfoTupleScheme getScheme() {
      return new RobotInfoTupleScheme();
    }
  }

  private static class RobotInfoTupleScheme extends TupleScheme<RobotInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOwner()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetSsid()) {
        optionals.set(2);
      }
      if (struct.isSetModelConfig()) {
        optionals.set(3);
      }
      if (struct.isSetSystemConfig()) {
        optionals.set(4);
      }
      if (struct.isSetProgram()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSsid()) {
        oprot.writeString(struct.ssid);
      }
      if (struct.isSetModelConfig()) {
        oprot.writeString(struct.modelConfig);
      }
      if (struct.isSetSystemConfig()) {
        oprot.writeString(struct.systemConfig);
      }
      if (struct.isSetProgram()) {
        oprot.writeString(struct.program);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ssid = iprot.readString();
        struct.setSsidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.modelConfig = iprot.readString();
        struct.setModelConfigIsSet(true);
      }
      if (incoming.get(4)) {
        struct.systemConfig = iprot.readString();
        struct.setSystemConfigIsSet(true);
      }
      if (incoming.get(5)) {
        struct.program = iprot.readString();
        struct.setProgramIsSet(true);
      }
    }
  }

}

