/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package robot;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-6")
public class RobotWrapper implements org.apache.thrift.TBase<RobotWrapper, RobotWrapper._Fields>, java.io.Serializable, Cloneable, Comparable<RobotWrapper> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotWrapper");

  private static final org.apache.thrift.protocol.TField ROBOT_FIELD_DESC = new org.apache.thrift.protocol.TField("robot", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ROBOT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("robotInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RobotWrapperStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RobotWrapperTupleSchemeFactory());
  }

  public Robot robot; // required
  public RobotInfo robotInfo; // required
  public String status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROBOT((short)1, "robot"),
    ROBOT_INFO((short)2, "robotInfo"),
    STATUS((short)3, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROBOT
          return ROBOT;
        case 2: // ROBOT_INFO
          return ROBOT_INFO;
        case 3: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROBOT, new org.apache.thrift.meta_data.FieldMetaData("robot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Robot.class)));
    tmpMap.put(_Fields.ROBOT_INFO, new org.apache.thrift.meta_data.FieldMetaData("robotInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RobotInfo.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotWrapper.class, metaDataMap);
  }

  public RobotWrapper() {
  }

  public RobotWrapper(
    Robot robot,
    RobotInfo robotInfo,
    String status)
  {
    this();
    this.robot = robot;
    this.robotInfo = robotInfo;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotWrapper(RobotWrapper other) {
    if (other.isSetRobot()) {
      this.robot = new Robot(other.robot);
    }
    if (other.isSetRobotInfo()) {
      this.robotInfo = new RobotInfo(other.robotInfo);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public RobotWrapper deepCopy() {
    return new RobotWrapper(this);
  }

  @Override
  public void clear() {
    this.robot = null;
    this.robotInfo = null;
    this.status = null;
  }

  public Robot getRobot() {
    return this.robot;
  }

  public RobotWrapper setRobot(Robot robot) {
    this.robot = robot;
    return this;
  }

  public void unsetRobot() {
    this.robot = null;
  }

  /** Returns true if field robot is set (has been assigned a value) and false otherwise */
  public boolean isSetRobot() {
    return this.robot != null;
  }

  public void setRobotIsSet(boolean value) {
    if (!value) {
      this.robot = null;
    }
  }

  public RobotInfo getRobotInfo() {
    return this.robotInfo;
  }

  public RobotWrapper setRobotInfo(RobotInfo robotInfo) {
    this.robotInfo = robotInfo;
    return this;
  }

  public void unsetRobotInfo() {
    this.robotInfo = null;
  }

  /** Returns true if field robotInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRobotInfo() {
    return this.robotInfo != null;
  }

  public void setRobotInfoIsSet(boolean value) {
    if (!value) {
      this.robotInfo = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public RobotWrapper setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROBOT:
      if (value == null) {
        unsetRobot();
      } else {
        setRobot((Robot)value);
      }
      break;

    case ROBOT_INFO:
      if (value == null) {
        unsetRobotInfo();
      } else {
        setRobotInfo((RobotInfo)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROBOT:
      return getRobot();

    case ROBOT_INFO:
      return getRobotInfo();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROBOT:
      return isSetRobot();
    case ROBOT_INFO:
      return isSetRobotInfo();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotWrapper)
      return this.equals((RobotWrapper)that);
    return false;
  }

  public boolean equals(RobotWrapper that) {
    if (that == null)
      return false;

    boolean this_present_robot = true && this.isSetRobot();
    boolean that_present_robot = true && that.isSetRobot();
    if (this_present_robot || that_present_robot) {
      if (!(this_present_robot && that_present_robot))
        return false;
      if (!this.robot.equals(that.robot))
        return false;
    }

    boolean this_present_robotInfo = true && this.isSetRobotInfo();
    boolean that_present_robotInfo = true && that.isSetRobotInfo();
    if (this_present_robotInfo || that_present_robotInfo) {
      if (!(this_present_robotInfo && that_present_robotInfo))
        return false;
      if (!this.robotInfo.equals(that.robotInfo))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_robot = true && (isSetRobot());
    list.add(present_robot);
    if (present_robot)
      list.add(robot);

    boolean present_robotInfo = true && (isSetRobotInfo());
    list.add(present_robotInfo);
    if (present_robotInfo)
      list.add(robotInfo);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(RobotWrapper other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRobot()).compareTo(other.isSetRobot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robot, other.robot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobotInfo()).compareTo(other.isSetRobotInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobotInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robotInfo, other.robotInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RobotWrapper(");
    boolean first = true;

    sb.append("robot:");
    if (this.robot == null) {
      sb.append("null");
    } else {
      sb.append(this.robot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("robotInfo:");
    if (this.robotInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.robotInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (robot != null) {
      robot.validate();
    }
    if (robotInfo != null) {
      robotInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotWrapperStandardSchemeFactory implements SchemeFactory {
    public RobotWrapperStandardScheme getScheme() {
      return new RobotWrapperStandardScheme();
    }
  }

  private static class RobotWrapperStandardScheme extends StandardScheme<RobotWrapper> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotWrapper struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROBOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.robot = new Robot();
              struct.robot.read(iprot);
              struct.setRobotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROBOT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.robotInfo = new RobotInfo();
              struct.robotInfo.read(iprot);
              struct.setRobotInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotWrapper struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.robot != null) {
        oprot.writeFieldBegin(ROBOT_FIELD_DESC);
        struct.robot.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.robotInfo != null) {
        oprot.writeFieldBegin(ROBOT_INFO_FIELD_DESC);
        struct.robotInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotWrapperTupleSchemeFactory implements SchemeFactory {
    public RobotWrapperTupleScheme getScheme() {
      return new RobotWrapperTupleScheme();
    }
  }

  private static class RobotWrapperTupleScheme extends TupleScheme<RobotWrapper> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotWrapper struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRobot()) {
        optionals.set(0);
      }
      if (struct.isSetRobotInfo()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRobot()) {
        struct.robot.write(oprot);
      }
      if (struct.isSetRobotInfo()) {
        struct.robotInfo.write(oprot);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotWrapper struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.robot = new Robot();
        struct.robot.read(iprot);
        struct.setRobotIsSet(true);
      }
      if (incoming.get(1)) {
        struct.robotInfo = new RobotInfo();
        struct.robotInfo.read(iprot);
        struct.setRobotInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
    }
  }

}

