/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sysconfigs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class ModelConfig implements org.apache.thrift.TBase<ModelConfig, ModelConfig._Fields>, java.io.Serializable, Cloneable, Comparable<ModelConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelConfig");

  private static final org.apache.thrift.protocol.TField DEVICE_PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("devicePorts", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("typeProperties", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelConfigTupleSchemeFactory());
  }

  public Map<String,String> devicePorts; // required
  public Map<String,Map<String,String>> typeProperties; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_PORTS((short)1, "devicePorts"),
    TYPE_PROPERTIES((short)2, "typeProperties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_PORTS
          return DEVICE_PORTS;
        case 2: // TYPE_PROPERTIES
          return TYPE_PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_PORTS, new org.apache.thrift.meta_data.FieldMetaData("devicePorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPE_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("typeProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelConfig.class, metaDataMap);
  }

  public ModelConfig() {
  }

  public ModelConfig(
    Map<String,String> devicePorts,
    Map<String,Map<String,String>> typeProperties)
  {
    this();
    this.devicePorts = devicePorts;
    this.typeProperties = typeProperties;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelConfig(ModelConfig other) {
    if (other.isSetDevicePorts()) {
      Map<String,String> __this__devicePorts = new HashMap<String,String>(other.devicePorts);
      this.devicePorts = __this__devicePorts;
    }
    if (other.isSetTypeProperties()) {
      Map<String,Map<String,String>> __this__typeProperties = new HashMap<String,Map<String,String>>(other.typeProperties.size());
      for (Map.Entry<String, Map<String,String>> other_element : other.typeProperties.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,String> other_element_value = other_element.getValue();

        String __this__typeProperties_copy_key = other_element_key;

        Map<String,String> __this__typeProperties_copy_value = new HashMap<String,String>(other_element_value);

        __this__typeProperties.put(__this__typeProperties_copy_key, __this__typeProperties_copy_value);
      }
      this.typeProperties = __this__typeProperties;
    }
  }

  public ModelConfig deepCopy() {
    return new ModelConfig(this);
  }

  @Override
  public void clear() {
    this.devicePorts = null;
    this.typeProperties = null;
  }

  public int getDevicePortsSize() {
    return (this.devicePorts == null) ? 0 : this.devicePorts.size();
  }

  public void putToDevicePorts(String key, String val) {
    if (this.devicePorts == null) {
      this.devicePorts = new HashMap<String,String>();
    }
    this.devicePorts.put(key, val);
  }

  public Map<String,String> getDevicePorts() {
    return this.devicePorts;
  }

  public ModelConfig setDevicePorts(Map<String,String> devicePorts) {
    this.devicePorts = devicePorts;
    return this;
  }

  public void unsetDevicePorts() {
    this.devicePorts = null;
  }

  /** Returns true if field devicePorts is set (has been assigned a value) and false otherwise */
  public boolean isSetDevicePorts() {
    return this.devicePorts != null;
  }

  public void setDevicePortsIsSet(boolean value) {
    if (!value) {
      this.devicePorts = null;
    }
  }

  public int getTypePropertiesSize() {
    return (this.typeProperties == null) ? 0 : this.typeProperties.size();
  }

  public void putToTypeProperties(String key, Map<String,String> val) {
    if (this.typeProperties == null) {
      this.typeProperties = new HashMap<String,Map<String,String>>();
    }
    this.typeProperties.put(key, val);
  }

  public Map<String,Map<String,String>> getTypeProperties() {
    return this.typeProperties;
  }

  public ModelConfig setTypeProperties(Map<String,Map<String,String>> typeProperties) {
    this.typeProperties = typeProperties;
    return this;
  }

  public void unsetTypeProperties() {
    this.typeProperties = null;
  }

  /** Returns true if field typeProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeProperties() {
    return this.typeProperties != null;
  }

  public void setTypePropertiesIsSet(boolean value) {
    if (!value) {
      this.typeProperties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_PORTS:
      if (value == null) {
        unsetDevicePorts();
      } else {
        setDevicePorts((Map<String,String>)value);
      }
      break;

    case TYPE_PROPERTIES:
      if (value == null) {
        unsetTypeProperties();
      } else {
        setTypeProperties((Map<String,Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_PORTS:
      return getDevicePorts();

    case TYPE_PROPERTIES:
      return getTypeProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_PORTS:
      return isSetDevicePorts();
    case TYPE_PROPERTIES:
      return isSetTypeProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelConfig)
      return this.equals((ModelConfig)that);
    return false;
  }

  public boolean equals(ModelConfig that) {
    if (that == null)
      return false;

    boolean this_present_devicePorts = true && this.isSetDevicePorts();
    boolean that_present_devicePorts = true && that.isSetDevicePorts();
    if (this_present_devicePorts || that_present_devicePorts) {
      if (!(this_present_devicePorts && that_present_devicePorts))
        return false;
      if (!this.devicePorts.equals(that.devicePorts))
        return false;
    }

    boolean this_present_typeProperties = true && this.isSetTypeProperties();
    boolean that_present_typeProperties = true && that.isSetTypeProperties();
    if (this_present_typeProperties || that_present_typeProperties) {
      if (!(this_present_typeProperties && that_present_typeProperties))
        return false;
      if (!this.typeProperties.equals(that.typeProperties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_devicePorts = true && (isSetDevicePorts());
    list.add(present_devicePorts);
    if (present_devicePorts)
      list.add(devicePorts);

    boolean present_typeProperties = true && (isSetTypeProperties());
    list.add(present_typeProperties);
    if (present_typeProperties)
      list.add(typeProperties);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDevicePorts()).compareTo(other.isSetDevicePorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevicePorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devicePorts, other.devicePorts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeProperties()).compareTo(other.isSetTypeProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeProperties, other.typeProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelConfig(");
    boolean first = true;

    sb.append("devicePorts:");
    if (this.devicePorts == null) {
      sb.append("null");
    } else {
      sb.append(this.devicePorts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("typeProperties:");
    if (this.typeProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.typeProperties);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelConfigStandardSchemeFactory implements SchemeFactory {
    public ModelConfigStandardScheme getScheme() {
      return new ModelConfigStandardScheme();
    }
  }

  private static class ModelConfigStandardScheme extends StandardScheme<ModelConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelConfig struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                struct.devicePorts = new HashMap<String,String>(2*_map60.size);
                String _key61;
                String _val62;
                for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                {
                  _key61 = iprot.readString();
                  _val62 = iprot.readString();
                  struct.devicePorts.put(_key61, _val62);
                }
                iprot.readMapEnd();
              }
              struct.setDevicePortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.typeProperties = new HashMap<String,Map<String,String>>(2*_map64.size);
                String _key65;
                Map<String,String> _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                    _val66 = new HashMap<String,String>(2*_map68.size);
                    String _key69;
                    String _val70;
                    for (int _i71 = 0; _i71 < _map68.size; ++_i71)
                    {
                      _key69 = iprot.readString();
                      _val70 = iprot.readString();
                      _val66.put(_key69, _val70);
                    }
                    iprot.readMapEnd();
                  }
                  struct.typeProperties.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setTypePropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelConfig struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.devicePorts != null) {
        oprot.writeFieldBegin(DEVICE_PORTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.devicePorts.size()));
          for (Map.Entry<String, String> _iter72 : struct.devicePorts.entrySet())
          {
            oprot.writeString(_iter72.getKey());
            oprot.writeString(_iter72.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.typeProperties != null) {
        oprot.writeFieldBegin(TYPE_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.typeProperties.size()));
          for (Map.Entry<String, Map<String,String>> _iter73 : struct.typeProperties.entrySet())
          {
            oprot.writeString(_iter73.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter73.getValue().size()));
              for (Map.Entry<String, String> _iter74 : _iter73.getValue().entrySet())
              {
                oprot.writeString(_iter74.getKey());
                oprot.writeString(_iter74.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelConfigTupleSchemeFactory implements SchemeFactory {
    public ModelConfigTupleScheme getScheme() {
      return new ModelConfigTupleScheme();
    }
  }

  private static class ModelConfigTupleScheme extends TupleScheme<ModelConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelConfig struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDevicePorts()) {
        optionals.set(0);
      }
      if (struct.isSetTypeProperties()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDevicePorts()) {
        {
          oprot.writeI32(struct.devicePorts.size());
          for (Map.Entry<String, String> _iter75 : struct.devicePorts.entrySet())
          {
            oprot.writeString(_iter75.getKey());
            oprot.writeString(_iter75.getValue());
          }
        }
      }
      if (struct.isSetTypeProperties()) {
        {
          oprot.writeI32(struct.typeProperties.size());
          for (Map.Entry<String, Map<String,String>> _iter76 : struct.typeProperties.entrySet())
          {
            oprot.writeString(_iter76.getKey());
            {
              oprot.writeI32(_iter76.getValue().size());
              for (Map.Entry<String, String> _iter77 : _iter76.getValue().entrySet())
              {
                oprot.writeString(_iter77.getKey());
                oprot.writeString(_iter77.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelConfig struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map78 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.devicePorts = new HashMap<String,String>(2*_map78.size);
          String _key79;
          String _val80;
          for (int _i81 = 0; _i81 < _map78.size; ++_i81)
          {
            _key79 = iprot.readString();
            _val80 = iprot.readString();
            struct.devicePorts.put(_key79, _val80);
          }
        }
        struct.setDevicePortsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.typeProperties = new HashMap<String,Map<String,String>>(2*_map82.size);
          String _key83;
          Map<String,String> _val84;
          for (int _i85 = 0; _i85 < _map82.size; ++_i85)
          {
            _key83 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val84 = new HashMap<String,String>(2*_map86.size);
              String _key87;
              String _val88;
              for (int _i89 = 0; _i89 < _map86.size; ++_i89)
              {
                _key87 = iprot.readString();
                _val88 = iprot.readString();
                _val84.put(_key87, _val88);
              }
            }
            struct.typeProperties.put(_key83, _val84);
          }
        }
        struct.setTypePropertiesIsSet(true);
      }
    }
  }

}

