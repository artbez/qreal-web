/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sysconfigs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-4-20")
public class SystemConfig implements org.apache.thrift.TBase<SystemConfig, SystemConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SystemConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemConfig");

  private static final org.apache.thrift.protocol.TField DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("devices", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("ports", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SystemConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SystemConfigTupleSchemeFactory());
  }

  public List<Device> devices; // required
  public List<Port> ports; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICES((short)1, "devices"),
    PORTS((short)2, "ports");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICES
          return DEVICES;
        case 2: // PORTS
          return PORTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICES, new org.apache.thrift.meta_data.FieldMetaData("devices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Device.class))));
    tmpMap.put(_Fields.PORTS, new org.apache.thrift.meta_data.FieldMetaData("ports", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Port.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemConfig.class, metaDataMap);
  }

  public SystemConfig() {
  }

  public SystemConfig(
    List<Device> devices,
    List<Port> ports)
  {
    this();
    this.devices = devices;
    this.ports = ports;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemConfig(SystemConfig other) {
    if (other.isSetDevices()) {
      List<Device> __this__devices = new ArrayList<Device>(other.devices.size());
      for (Device other_element : other.devices) {
        __this__devices.add(new Device(other_element));
      }
      this.devices = __this__devices;
    }
    if (other.isSetPorts()) {
      List<Port> __this__ports = new ArrayList<Port>(other.ports.size());
      for (Port other_element : other.ports) {
        __this__ports.add(new Port(other_element));
      }
      this.ports = __this__ports;
    }
  }

  public SystemConfig deepCopy() {
    return new SystemConfig(this);
  }

  @Override
  public void clear() {
    this.devices = null;
    this.ports = null;
  }

  public int getDevicesSize() {
    return (this.devices == null) ? 0 : this.devices.size();
  }

  public java.util.Iterator<Device> getDevicesIterator() {
    return (this.devices == null) ? null : this.devices.iterator();
  }

  public void addToDevices(Device elem) {
    if (this.devices == null) {
      this.devices = new ArrayList<Device>();
    }
    this.devices.add(elem);
  }

  public List<Device> getDevices() {
    return this.devices;
  }

  public SystemConfig setDevices(List<Device> devices) {
    this.devices = devices;
    return this;
  }

  public void unsetDevices() {
    this.devices = null;
  }

  /** Returns true if field devices is set (has been assigned a value) and false otherwise */
  public boolean isSetDevices() {
    return this.devices != null;
  }

  public void setDevicesIsSet(boolean value) {
    if (!value) {
      this.devices = null;
    }
  }

  public int getPortsSize() {
    return (this.ports == null) ? 0 : this.ports.size();
  }

  public java.util.Iterator<Port> getPortsIterator() {
    return (this.ports == null) ? null : this.ports.iterator();
  }

  public void addToPorts(Port elem) {
    if (this.ports == null) {
      this.ports = new ArrayList<Port>();
    }
    this.ports.add(elem);
  }

  public List<Port> getPorts() {
    return this.ports;
  }

  public SystemConfig setPorts(List<Port> ports) {
    this.ports = ports;
    return this;
  }

  public void unsetPorts() {
    this.ports = null;
  }

  /** Returns true if field ports is set (has been assigned a value) and false otherwise */
  public boolean isSetPorts() {
    return this.ports != null;
  }

  public void setPortsIsSet(boolean value) {
    if (!value) {
      this.ports = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICES:
      if (value == null) {
        unsetDevices();
      } else {
        setDevices((List<Device>)value);
      }
      break;

    case PORTS:
      if (value == null) {
        unsetPorts();
      } else {
        setPorts((List<Port>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICES:
      return getDevices();

    case PORTS:
      return getPorts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICES:
      return isSetDevices();
    case PORTS:
      return isSetPorts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemConfig)
      return this.equals((SystemConfig)that);
    return false;
  }

  public boolean equals(SystemConfig that) {
    if (that == null)
      return false;

    boolean this_present_devices = true && this.isSetDevices();
    boolean that_present_devices = true && that.isSetDevices();
    if (this_present_devices || that_present_devices) {
      if (!(this_present_devices && that_present_devices))
        return false;
      if (!this.devices.equals(that.devices))
        return false;
    }

    boolean this_present_ports = true && this.isSetPorts();
    boolean that_present_ports = true && that.isSetPorts();
    if (this_present_ports || that_present_ports) {
      if (!(this_present_ports && that_present_ports))
        return false;
      if (!this.ports.equals(that.ports))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_devices = true && (isSetDevices());
    list.add(present_devices);
    if (present_devices)
      list.add(devices);

    boolean present_ports = true && (isSetPorts());
    list.add(present_ports);
    if (present_ports)
      list.add(ports);

    return list.hashCode();
  }

  @Override
  public int compareTo(SystemConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDevices()).compareTo(other.isSetDevices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.devices, other.devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPorts()).compareTo(other.isSetPorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ports, other.ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemConfig(");
    boolean first = true;

    sb.append("devices:");
    if (this.devices == null) {
      sb.append("null");
    } else {
      sb.append(this.devices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ports:");
    if (this.ports == null) {
      sb.append("null");
    } else {
      sb.append(this.ports);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemConfigStandardSchemeFactory implements SchemeFactory {
    public SystemConfigStandardScheme getScheme() {
      return new SystemConfigStandardScheme();
    }
  }

  private static class SystemConfigStandardScheme extends StandardScheme<SystemConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemConfig struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.devices = new ArrayList<Device>(_list44.size);
                Device _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = new Device();
                  _elem45.read(iprot);
                  struct.devices.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setDevicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.ports = new ArrayList<Port>(_list47.size);
                Port _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = new Port();
                  _elem48.read(iprot);
                  struct.ports.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setPortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemConfig struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.devices != null) {
        oprot.writeFieldBegin(DEVICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.devices.size()));
          for (Device _iter50 : struct.devices)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ports != null) {
        oprot.writeFieldBegin(PORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ports.size()));
          for (Port _iter51 : struct.ports)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemConfigTupleSchemeFactory implements SchemeFactory {
    public SystemConfigTupleScheme getScheme() {
      return new SystemConfigTupleScheme();
    }
  }

  private static class SystemConfigTupleScheme extends TupleScheme<SystemConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemConfig struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDevices()) {
        optionals.set(0);
      }
      if (struct.isSetPorts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDevices()) {
        {
          oprot.writeI32(struct.devices.size());
          for (Device _iter52 : struct.devices)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetPorts()) {
        {
          oprot.writeI32(struct.ports.size());
          for (Port _iter53 : struct.ports)
          {
            _iter53.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemConfig struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.devices = new ArrayList<Device>(_list54.size);
          Device _elem55;
          for (int _i56 = 0; _i56 < _list54.size; ++_i56)
          {
            _elem55 = new Device();
            _elem55.read(iprot);
            struct.devices.add(_elem55);
          }
        }
        struct.setDevicesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ports = new ArrayList<Port>(_list57.size);
          Port _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = new Port();
            _elem58.read(iprot);
            struct.ports.add(_elem58);
          }
        }
        struct.setPortsIsSet(true);
      }
    }
  }

}

