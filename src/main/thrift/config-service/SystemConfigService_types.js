//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


DeviceType = function(args) {
  this.name = null;
  this.properties = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
  }
};
DeviceType.prototype = {};
DeviceType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.properties = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.properties[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceType.prototype.write = function(output) {
  output.writeStructBegin('DeviceType');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter8 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter8))
      {
        var viter9 = this.properties[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Device = function(args) {
  this.name = null;
  this.properties = null;
  this.availablePorts = null;
  this.types = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
    if (args.availablePorts !== undefined) {
      this.availablePorts = args.availablePorts;
    }
    if (args.types !== undefined) {
      this.types = args.types;
    }
  }
};
Device.prototype = {};
Device.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.properties = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          if (_i15 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key16 = null;
          var val17 = null;
          key16 = input.readString().value;
          val17 = input.readString().value;
          this.properties[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.availablePorts = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString().value;
          this.availablePorts.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size25 = 0;
        var _rtmp329;
        this.types = [];
        var _etype28 = 0;
        _rtmp329 = input.readListBegin();
        _etype28 = _rtmp329.etype;
        _size25 = _rtmp329.size;
        for (var _i30 = 0; _i30 < _size25; ++_i30)
        {
          var elem31 = null;
          elem31 = new DeviceType();
          elem31.read(input);
          this.types.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Device.prototype.write = function(output) {
  output.writeStructBegin('Device');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter32 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter32))
      {
        var viter33 = this.properties[kiter32];
        output.writeString(kiter32);
        output.writeString(viter33);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.availablePorts !== null && this.availablePorts !== undefined) {
    output.writeFieldBegin('availablePorts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.availablePorts.length);
    for (var iter34 in this.availablePorts)
    {
      if (this.availablePorts.hasOwnProperty(iter34))
      {
        iter34 = this.availablePorts[iter34];
        output.writeString(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.types.length);
    for (var iter35 in this.types)
    {
      if (this.types.hasOwnProperty(iter35))
      {
        iter35 = this.types[iter35];
        iter35.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Port = function(args) {
  this.devices = null;
  this.name = null;
  if (args) {
    if (args.devices !== undefined) {
      this.devices = args.devices;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Port.prototype = {};
Port.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.devices = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = new Device();
          elem42.read(input);
          this.devices.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Port.prototype.write = function(output) {
  output.writeStructBegin('Port');
  if (this.devices !== null && this.devices !== undefined) {
    output.writeFieldBegin('devices', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.devices.length);
    for (var iter43 in this.devices)
    {
      if (this.devices.hasOwnProperty(iter43))
      {
        iter43 = this.devices[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SystemConfig = function(args) {
  this.devices = null;
  this.ports = null;
  if (args) {
    if (args.devices !== undefined) {
      this.devices = args.devices;
    }
    if (args.ports !== undefined) {
      this.ports = args.ports;
    }
  }
};
SystemConfig.prototype = {};
SystemConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.devices = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new Device();
          elem50.read(input);
          this.devices.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size51 = 0;
        var _rtmp355;
        this.ports = [];
        var _etype54 = 0;
        _rtmp355 = input.readListBegin();
        _etype54 = _rtmp355.etype;
        _size51 = _rtmp355.size;
        for (var _i56 = 0; _i56 < _size51; ++_i56)
        {
          var elem57 = null;
          elem57 = new Port();
          elem57.read(input);
          this.ports.push(elem57);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemConfig.prototype.write = function(output) {
  output.writeStructBegin('SystemConfig');
  if (this.devices !== null && this.devices !== undefined) {
    output.writeFieldBegin('devices', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.devices.length);
    for (var iter58 in this.devices)
    {
      if (this.devices.hasOwnProperty(iter58))
      {
        iter58 = this.devices[iter58];
        iter58.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ports !== null && this.ports !== undefined) {
    output.writeFieldBegin('ports', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ports.length);
    for (var iter59 in this.ports)
    {
      if (this.ports.hasOwnProperty(iter59))
      {
        iter59 = this.ports[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelConfig = function(args) {
  this.devicePorts = null;
  this.typeProperties = null;
  if (args) {
    if (args.devicePorts !== undefined) {
      this.devicePorts = args.devicePorts;
    }
    if (args.typeProperties !== undefined) {
      this.typeProperties = args.typeProperties;
    }
  }
};
ModelConfig.prototype = {};
ModelConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size60 = 0;
        var _rtmp364;
        this.devicePorts = {};
        var _ktype61 = 0;
        var _vtype62 = 0;
        _rtmp364 = input.readMapBegin();
        _ktype61 = _rtmp364.ktype;
        _vtype62 = _rtmp364.vtype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          if (_i65 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key66 = null;
          var val67 = null;
          key66 = input.readString().value;
          val67 = input.readString().value;
          this.devicePorts[key66] = val67;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size68 = 0;
        var _rtmp372;
        this.typeProperties = {};
        var _ktype69 = 0;
        var _vtype70 = 0;
        _rtmp372 = input.readMapBegin();
        _ktype69 = _rtmp372.ktype;
        _vtype70 = _rtmp372.vtype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          if (_i73 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key74 = null;
          var val75 = null;
          key74 = input.readString().value;
          var _size76 = 0;
          var _rtmp380;
          val75 = {};
          var _ktype77 = 0;
          var _vtype78 = 0;
          _rtmp380 = input.readMapBegin();
          _ktype77 = _rtmp380.ktype;
          _vtype78 = _rtmp380.vtype;
          _size76 = _rtmp380.size;
          for (var _i81 = 0; _i81 < _size76; ++_i81)
          {
            if (_i81 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key82 = null;
            var val83 = null;
            key82 = input.readString().value;
            val83 = input.readString().value;
            val75[key82] = val83;
          }
          input.readMapEnd();
          this.typeProperties[key74] = val75;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelConfig.prototype.write = function(output) {
  output.writeStructBegin('ModelConfig');
  if (this.devicePorts !== null && this.devicePorts !== undefined) {
    output.writeFieldBegin('devicePorts', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.devicePorts));
    for (var kiter84 in this.devicePorts)
    {
      if (this.devicePorts.hasOwnProperty(kiter84))
      {
        var viter85 = this.devicePorts[kiter84];
        output.writeString(kiter84);
        output.writeString(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.typeProperties !== null && this.typeProperties !== undefined) {
    output.writeFieldBegin('typeProperties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.typeProperties));
    for (var kiter86 in this.typeProperties)
    {
      if (this.typeProperties.hasOwnProperty(kiter86))
      {
        var viter87 = this.typeProperties[kiter86];
        output.writeString(kiter86);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter87));
        for (var kiter88 in viter87)
        {
          if (viter87.hasOwnProperty(kiter88))
          {
            var viter89 = viter87[kiter88];
            output.writeString(kiter88);
            output.writeString(viter89);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

