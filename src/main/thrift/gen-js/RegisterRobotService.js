//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

RegisterRobotService_registerRobot_args = function(args) {
  this.robotName = null;
  this.ssid = null;
  if (args) {
    if (args.robotName !== undefined) {
      this.robotName = args.robotName;
    }
    if (args.ssid !== undefined) {
      this.ssid = args.ssid;
    }
  }
};
RegisterRobotService_registerRobot_args.prototype = {};
RegisterRobotService_registerRobot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robotName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterRobotService_registerRobot_args.prototype.write = function(output) {
  output.writeStructBegin('RegisterRobotService_registerRobot_args');
  if (this.robotName !== null && this.robotName !== undefined) {
    output.writeFieldBegin('robotName', Thrift.Type.STRING, 1);
    output.writeString(this.robotName);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterRobotService_registerRobot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RegisterRobotService_registerRobot_result.prototype = {};
RegisterRobotService_registerRobot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterRobotService_registerRobot_result.prototype.write = function(output) {
  output.writeStructBegin('RegisterRobotService_registerRobot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterRobotService_deleteRobot_args = function(args) {
  this.robotName = null;
  if (args) {
    if (args.robotName !== undefined) {
      this.robotName = args.robotName;
    }
  }
};
RegisterRobotService_deleteRobot_args.prototype = {};
RegisterRobotService_deleteRobot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robotName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterRobotService_deleteRobot_args.prototype.write = function(output) {
  output.writeStructBegin('RegisterRobotService_deleteRobot_args');
  if (this.robotName !== null && this.robotName !== undefined) {
    output.writeFieldBegin('robotName', Thrift.Type.STRING, 1);
    output.writeString(this.robotName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterRobotService_deleteRobot_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RegisterRobotService_deleteRobot_result.prototype = {};
RegisterRobotService_deleteRobot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterRobotService_deleteRobot_result.prototype.write = function(output) {
  output.writeStructBegin('RegisterRobotService_deleteRobot_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RegisterRobotServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
RegisterRobotServiceClient.prototype = {};
RegisterRobotServiceClient.prototype.registerRobot = function(robotName, ssid, callback) {
  this.send_registerRobot(robotName, ssid, callback); 
  if (!callback) {
    return this.recv_registerRobot();
  }
};

RegisterRobotServiceClient.prototype.send_registerRobot = function(robotName, ssid, callback) {
  this.output.writeMessageBegin('registerRobot', Thrift.MessageType.CALL, this.seqid);
  var args = new RegisterRobotService_registerRobot_args();
  args.robotName = robotName;
  args.ssid = ssid;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_registerRobot();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

RegisterRobotServiceClient.prototype.recv_registerRobot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RegisterRobotService_registerRobot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'registerRobot failed: unknown result';
};
RegisterRobotServiceClient.prototype.deleteRobot = function(robotName, callback) {
  this.send_deleteRobot(robotName, callback); 
  if (!callback) {
    return this.recv_deleteRobot();
  }
};

RegisterRobotServiceClient.prototype.send_deleteRobot = function(robotName, callback) {
  this.output.writeMessageBegin('deleteRobot', Thrift.MessageType.CALL, this.seqid);
  var args = new RegisterRobotService_deleteRobot_args();
  args.robotName = robotName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deleteRobot();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

RegisterRobotServiceClient.prototype.recv_deleteRobot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RegisterRobotService_deleteRobot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deleteRobot failed: unknown result';
};
